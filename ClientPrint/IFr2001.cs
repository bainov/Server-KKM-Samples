using System.Diagnostics.CodeAnalysis;

namespace ClientPrint
{
    /// <summary>
    /// Требования к разработке драйверов для фискальных регистраторов 2.1  <a href="https://its.1c.ru/db/metod8dev#content:4829:hdoc:chapter235">Источник</a>
    /// </summary>
    /// <remarks>
    /// <para>
    /// При работе с фискальными регистраторами (АСПД, принтерами чеков для ЕНВД) поддерживаются основные операции:
    /// *Печать чеков внесения/выемки денежных средств;
    /// *Печать чека ККМ;
    /// *Печать отчетов за смену с гашением(Z-отчет) и без гашения(X-отчет).
    /// </para>
    /// <para>
    /// Алгоритм печати чека ККМ.
    /// При формировании чеков ККМ конфигурация посылает команду на открытие нового чека. В зависимости от переданного параметра чек открывается в фискальном или не фискальном режиме.
    ///
    /// В режиме открытого чека производится печать фискальной или не фискальной строки. При печати фискальной строки рассчитываются скидки. Если рассчитанное по формуле "Цена на*Количество – Сумма по строке" значение отлично от 0, то в чеке печатается абсолютное значение скидки в денежном выражении. Если значение скидки меньше нуля, вместо слова "Скидка" выводится слово «Наценка».
    ///
    /// Поддерживается аннулирование ранее открытого чека при помощи параметра "АннулироватьОткрытыйЧек" метода "ОткрытьЧек".
    ///
    /// Поддерживается печать штрих-кода в открытом чеке, если это позволяет сделать модель устройства.
    ///
    /// По окончании печати строк чека производится расчет по чеку.Расчет по чеку может производиться несколькими видами оплат. При открытом фискальном чеке происходит печать итогов и сумм оплаты.
    /// </para>
    /// </remarks>
    /// <example>
    /// Пример работы
    ///  <code language="1С" title="1C">
    ///    ОчиститьСообщения();
    ///
    ///    //ПодключитьВнешнююКомпоненту("Addin.RBSoftPrintServiceV3");
    ///    //ОбъектДрайвера = Новый ("Addin.RBSoftPrintServiceV3");
    ///
    ///    ПодключитьВнешнююКомпоненту("Addin.RBSoftPrintServiceKKTV3");
    ///    ОбъектДрайвера = Новый("Addin.RBSoftPrintServiceKKTV3");
    ///
    ///    ИмяПодключения = "test";
    ///	ОбъектДрайвера.Адрес = Адрес;
    ///	ОбъектДрайвера.Порт = Порт;
    ///
    ///    Сообщить("Подключение: " +ОбъектДрайвера.Подключить(ИмяПодключения));
    ///
    ///    Сообщить("Имя подключения: " +ИмяПодключения);
    ///
    ///	Результат = ОбъектДрайвера.НапечататьТекстовыйДокумент(ИмяУстройства,XmlСтрока);
    ///
    ///    Сообщить("Результат текстового документа"+Результат);
    ///
    ///
    ///    Если(Результат = Ложь) Тогда
    ///
    ///       ОписаниеОшибки = "";
    ///    Ошибка=0;
    ///		Ошибка=ОбъектДрайвера.ПолучитьОшибку(ОписаниеОшибки);
    ///
    ///        Сообщить("Ошибка "+Ошибка);
    ///
    ///        Сообщить("Описание ошибки "+ОписаниеОшибки);
    ///    КонецЕсли;
    ///
    /// </code>
    /// </example>
    [SuppressMessage("ReSharper", "InconsistentNaming")]
    public interface IFr2001
    {
        //TODO Добавить псевдонимы

        /// <summary>
        /// Открывает новую смену.
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
        bool ОткрытьСмену(string ИдУстойства);

        //OpenShift

        /// <summary>
        /// Открывает новый чек.
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <param name="ФискальныйЧек">Признак фискального чека</param>
        /// <param name="ЧекВозврата">Признак чека возврата</param>
        /// <param name="АнулироватьОткрытыйЧек">Признак автоматического аннулирования ранее открытого чека</param>
        /// <param name="НомерЧека">Номер нового чека</param>
        /// <param name="НомерСмены">Номер открытой смены</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
#warning Номер чека и смены могут отличаться

        bool ОткрытьЧек(string ИдУстойства, bool ФискальныйЧек, bool ЧекВозврата, bool АнулироватьОткрытыйЧек, out int НомерЧека, out int НомерСмены);

        //OpenCheck

        /// <summary>
        /// Печатает строку товарной позиции с переданными реквизитами.
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <param name="Наименование">Наименование товара</param>
        /// <param name="Количество">Количество товара</param>
        /// <param name="Цена">Цена единицы товара (в формате &lt;Рубли,Копейки&gt; )</param>
        /// <param name="Сумма">Конечная сумма по позиции чека (с учетом всех скидок/наценок; в формате &lt;Рубли,Копейки&gt;)</param>
        /// <param name="Отдел">Отдел, по которому ведется продажа</param>
        /// <param name="НДС">НДС в процентах (от 0 до 99,99)</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
        bool НапечататьФискСтроку(string ИдУстойства, string Наименование, double Количество, double Цена, double Сумма, long Отдел, double НДС);

        //PrintFiscalString

        /// <summary>
        /// Выводит произвольную текстовую строку на чековую ленту.
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <param name="СтрокаТекста">	Строка с произвольным текстом</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
        bool НапечататьНефискСтроку(string ИдУстойства, string СтрокаТекста);

        //PrintNonFiscalString

        /// <summary>
        /// Печать штрих-кода осуществляется с автоматическим размером с выравниванием по центру чека. Тип штрих-кода может иметь одно из следующих значений: EAN8, EAN13, CODE39, QR. В случае, если модель устройства не поддерживает печать штрих-кода, выдается ошибка.
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <param name="ТипШтрихкода">Строка, определяющая тип штрих-кода</param>
        /// <param name="Штрихкод">	Значение штрих-кода</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
        bool НапечататьШтрихКод(string ИдУстойства, string ТипШтрихкода, string Штрихкод);

        //PrintBarCode

        /// <summary>
        ///	Закрывает чек. Сумма всех видов оплат должна быть больше суммы открытого чека.
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <param name="НаличнаяОплата">Сумма наличной оплаты</param>
        /// <param name="ОплатаКартой">Сумма оплаты картой</param>
        /// <param name="ОплатаКредитом">Сумма оплаты кредитом</param>
        /// <param name="ОплатаСертификатом">Сумма оплаты сертификатом</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
        bool ЗакрытьЧек(string ИдУстойства, double НаличнаяОплата, double ОплатаКартой, double ОплатаКредитом, double ОплатаСертификатом);

        //CloseCheck

        /// <summary>
        /// Отменяет ранее открытый чек (требует административные привилегии).
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
        bool ОтменитьЧек(string ИдУстойства);

        //CancelCheck

        /// <summary>
        /// Печатает на ФР чек внесения/ выемки
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <param name="Сумма">Сумма формате &lt;Рубли,Копейки&gt;</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
        /// <remarks> (зависит от переданной суммы). Сумма &gt;= 0 - внесение, Сумма &lt; 0 - выемка.</remarks>
        bool НапечататьЧекВнесенияВыемки(string ИдУстойства, double Сумма);

        //CashInOutcome

        /// <summary>
        /// Печатает на ФР отчет за смену без гашения (не закрывает кассовую смену)
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
        bool НапечататьОтчетБезГашения(string ИдУстойства);

        //PrintXReport

        /// <summary>
        /// Печатает на ФР отчет за смену с гашением (закрывает кассовую смену, требует административные привилегии).
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
        bool НапечататьОтчетСГашением(string ИдУстойства);

        //PrintZReport

        /// <summary>
        /// Производит открытие денежного ящика, подключенного к фискальному регистратору.
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
        bool ОткрытьДенежныйЯщик(string ИдУстойства);

        //OpenCashDrawer

        /// <summary>
        /// Получить ширину строки чека в символах.
        /// </summary>
        /// <param name="ИдУстойства">Идентификатор устройства</param>
        /// <param name="ШиринаСтроки">Ширина строки в символах</param>
        /// <returns>Значение = Истина, если метод успешно выполнен; в противном случае — значение = Ложь.</returns>
        bool ПолучитьШиринуСтроки(string ИдУстойства, out int ШиринаСтроки);

        //GetLineLength
    }
}